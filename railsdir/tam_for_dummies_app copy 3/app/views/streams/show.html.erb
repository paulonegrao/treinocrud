<% if (user_signed_in?) %>

        <script src='https://cdn.webrtc-experiment.com/firebase.js'> </script>
        <script src="https://cdn.webrtc-experiment.com/Pluginfree-Screen-Sharing/conference.js"> </script>

            <div class="github-stargazers"></div>
                <table style="width: 100%;" class="hidden" id="rooms-list"></table>
                <div class="container-fluid">
                          <div class="row">
                            <%= form_for "" do |f| %>
                                <div class="col-md-10" style="padding-right: 0;">
                                    <span  class="col-md-2 form_stream">
                                        <label class="label"><%= f.label "Lecture", class: "label" %></label>
                                        <%= f.text_field :lecture_id, readonly: true, value: "#{@lecture.chapter}. #{@lecture.subject}", class: "tfield" %>
                                    </span>
                                    <span  class="col-md-2 form_stream">
                                        <label class="label"><%= f.label "Topic", class: "label"  %></label>
                                        <%= f.text_field :topic_id, readonly: true, value: "#{@topic.number}. #{@topic.title}", class: "tfield" %>
                                    </span>

                                    <span  class="col-md-8 form_stream" style="padding-right: 0;">
                                        <label class="label"><%= f.label "Description", class: "label"  %></label>
                                        <%= f.text_field :description, readonly: true, value: "#{@stream.description}", class: "tfield col-md-8", style: 'margin-right: 0; width: 100%' %>
                                    </span>
                                </div>
                                <div class="col-md-2">
                                    <div></div>
                                    <span  class="form_stream">
                                      <label class="label"><%= f.label "Stream ID", class: "label"  %></label>
                                      <%= f.text_field :timestamp, readonly: true, value: "#{@stream.timestamp}", class: "tfield" %>
                                    </span>
                                </div>
                            <% end %>
                          </div>
                          <div class="row">
                               <div class="col-md-10">
                                  <span class="col-md-12" style="background: gray; margin-left: 14px; padding: 0 0 0 0;">
                                      <div id="videos-container"></div>
                                      <video id="teste" width="100%" height="240" autoplay></video>
                                  </span>
                              </div>
                              <div class="col-md-2">
                                <% if current_user.role == 'instructor' %>
                                  <div></div>
                                  <button id="share-screen" class="tam-button tam-capturing"></button>
                                  <div></div>
                                  <!-- onika <button id="cut-screen" class="tam-button" onclick="window.location.reload();"><img src="<%#= asset_path 'bt_tam_cut.png' %>"></button> -->
                                  <button id="tam-roomToken" class="tam-button join"><img src="<%= asset_path 'bt_tam_cut.png' %>"></button>
                                <% else %>
                                  <div></div>
                                <!--  <button id="share-screen" class="tam-button" disabled><img src="<%#= asset_path 'bt_tam_liveoff.png' %>"></button> -->
                                  <button id="tam-roomToken" class="tam-button tam-liveoff"></button>
                                  <div></div>
                                  <!-- onika <button id="cut-screen" class="tam-button" onclick="window.location.reload();"><img src="<%#= asset_path 'bt_tam_cut.png' %>"></button> -->
                                  <button id="ze" class="tam-button join"><img src="<%= asset_path 'bt_tam_cut.png' %>"></button>
                              <% end %>
                              </div>

                          </div>
                </div>

        <div>
<!-- AJAX to update Event with Stream data and update the 'updated_at' field  -->
          <%= form_for @event, as: :event, url: event_path(@event), method: :patch, remote: true do |f| %>
            <%= f.hidden_field :live_id, value: "#{@stream.id}"%>
            <%= f.hidden_field :live_yt_id, value: "#{@stream.timestamp}"%>
            <%= f.submit "", id: 'tam-event-keep-alive-video' %>
          <% end %>
        </div>
<% end %>
            <!-- </section> -->

            <script>


            document.getElementsByTagName('video')[0].webkitEnterFullscreen();


                var isWebRTCExperimentsDomain = document.domain.indexOf('tam4dummies.com') != -1;
                var config = {
                    openSocket: function(config) {
                        var channel = config.channel || 'screen-capturing-' + location.href.replace( /\/|:|#|%|\.|\[|\]/g , '');
                        var socket = new Firebase('https://webrtc.firebaseIO.com/' + channel);
                        socket.channel = channel;
                        socket.on("child_added", function(data) {
                            config.onmessage && config.onmessage(data.val());
                        });
                        socket.send = function(data) {
                            this.push(data);
                        };
                        config.onopen && setTimeout(config.onopen, 1);
                        socket.onDisconnect().remove();
                        return socket;
                    },
                    onRemoteStream: function(media) {
                        var video = media.video;
                        video.setAttribute('controls', true);
                        video.setAttribute('id', 'video_tam');
                        videosContainer.insertBefore(video, videosContainer.firstChild);
// tam-liveon .... (alert(100);
                        video.play();
                        // rotateVideo(video);
                    },
                    onRoomFound: function(room) {

                        if(location.hash.replace('#', '').length) {
                            // private rooms should auto be joined.
                            conferenceUI.joinRoom({
                              //onika  roomToken: room.roomToken,
                                roomToken: 'tam-roomToken',
                            joinUser: room.broadcaster
                            //    joinUser: 'tam_broadcaster'
                            });
                            return;
                        }

                        var alreadyExist = document.getElementById(room.broadcaster);
                        // var alreadyExist = document.getElementById('tam_broadcaster');
                        if (alreadyExist) return;

                        if (typeof roomsList === 'undefined') roomsList = document.body;

                        var tr = document.createElement('tr');
                        tr.setAttribute('id', room.broadcaster);
                        tr.setAttribute('class', 'hidden');
                        //tr.setAttribute('id', 'tam_broadcaster');
                        //onika tr.innerHTML = '<td>' + room.roomName + '</td>' +
                        tr.innerHTML = '<td class="hidden"></td>' +
                        //onika    '<td><button class="join" id="' + room.roomToken + '">Open Screen</button></td>';
                        '<td class="hidden"><button class="tam-join hidden"></button></td>';

                        roomsList.insertBefore(tr, roomsList.firstChild);

                        //onika var button = tr.querySelector('.join');
                        var buttonJoin = tr.querySelector('.tam-join');
                        var button = document.getElementById('tam-roomToken');
                        button.onclick = function() {
                            var button = this;
                            var tam_obj = $('#tam-roomToken');
                            tam_obj.removeClass('tam-liveoff');
                            tam_obj.addClass('tam-liveon');
                            tam_obj.attr('onclick', 'window.location.reload()');
                            conferenceUI.joinRoom({
                                roomToken: button.id,
                                //onika joinUser: button.parentNode.parentNode.id
                                joinUser: buttonJoin.parentNode.parentNode.id
                                //joinUser: 'tam_broadcaster'
                            });
                        };
                    },

                    onNewParticipant: function(numberOfParticipants) {
                        document.title = numberOfParticipants + ' users are viewing your screen!';
                        var element = document.getElementById('number-of-participants');
                        if (element) {
                            element.innerHTML = numberOfParticipants + ' users are viewing your screen!';
                        }
                    },
                    oniceconnectionstatechange: function(state) {
                        if(state == 'failed') {
                            alert('Failed to bypass Firewall rules. It seems that target user did not receive your screen. Please ask him reload the page and try again.');
                        }

                        if(state == 'connected') {
                            alert('A user successfully received your screen.');
                        }
                    }
                };

                function captureUserMedia(callback, extensionAvailable) {
                    console.log('captureUserMedia chromeMediaSource', DetectRTC.screen.chromeMediaSource);

                    var screen_constraints = {
                        mandatory: {
                            chromeMediaSource: DetectRTC.screen.chromeMediaSource,
                            maxWidth: screen.width > 1920 ? screen.width : 1920,
                            maxHeight: screen.height > 1080 ? screen.height : 1080
                            // minAspectRatio: 1.77
                        },
                        optional: [{ // non-official Google-only optional constraints
                            googTemporalLayeredScreencast: true
                        }, {
                            googLeakyBucket: true
                        }]
                    };

                    // try to check if extension is installed.
                    if(isChrome && isWebRTCExperimentsDomain && typeof extensionAvailable == 'undefined' && DetectRTC.screen.chromeMediaSource != 'desktop') {
                        DetectRTC.screen.isChromeExtensionAvailable(function(available) {
                            captureUserMedia(callback, available);
                        });
                        return;
                    }

                    if(isChrome && isWebRTCExperimentsDomain && DetectRTC.screen.chromeMediaSource == 'desktop' && !DetectRTC.screen.sourceId) {
                        DetectRTC.screen.getSourceId(function(error) {
                            if(error && error == 'PermissionDeniedError') {
//----------------------tamcode nothing selected, forcin page reload
                                window.location.reload();
//----------------------
                                alert('PermissionDeniedError: User denied to share content of his screen.');
                            }

                            captureUserMedia(callback);
                        });
                        return;
                    }

                    // for non-www.webrtc-experiment.com domains
                    if(isChrome && !isWebRTCExperimentsDomain && !DetectRTC.screen.sourceId) {
                        window.addEventListener('message', function (event) {
                            if (event.data && event.data.chromeMediaSourceId) {
                                var sourceId = event.data.chromeMediaSourceId;

                                DetectRTC.screen.sourceId = sourceId;
                                DetectRTC.screen.chromeMediaSource = 'desktop';

                                if (sourceId == 'PermissionDeniedError') {

//----------------------tamcode nothing selected, forcin page reload
                                    window.location.reload();
//----------------------
                                    return alert('User denied to share content of his screen.');
                                }

                                captureUserMedia(callback, true);
                            }

                            if (event.data && event.data.chromeExtensionStatus) {
                                warn('Screen capturing extension status is:', event.data.chromeExtensionStatus);
                                DetectRTC.screen.chromeMediaSource = 'screen';
                                captureUserMedia(callback, true);
                            }
                        });
                        screenFrame.postMessage();
                        return;
                    }

                    if(isChrome && DetectRTC.screen.chromeMediaSource == 'desktop') {
                        screen_constraints.mandatory.chromeMediaSourceId = DetectRTC.screen.sourceId;
                    }

                    var constraints = {
                        audio: false,
                        video: screen_constraints
                    };

                    if(!!navigator.mozGetUserMedia) {
                        console.warn(Firefox_Screen_Capturing_Warning);
                        constraints.video = {
                            mozMediaSource: 'window',
                            mediaSource: 'window',
                            maxWidth: 1920,
                            maxHeight: 1080,
                            minAspectRatio: 1.77
                        };
                    }

                    console.log( JSON.stringify( constraints , null, '\t') );
// tam-capturing .... alert(260);
                    document.getElementById("teste").remove();

                    var video = document.createElement('video');
                    video.setAttribute('autoplay', true);
                    video.setAttribute('controls', true);
                    video.setAttribute('id', 'video_tam');
                    videosContainer.insertBefore(video, videosContainer.firstChild);

                    getUserMedia({
                        video: video,
                        constraints: constraints,
                        onsuccess: function(stream) {
                            config.attachStream = stream;
                            callback && callback();

                            video.setAttribute('muted', true);
                            video.setAttribute('id', 'video_tam');
// tamcode changing capturing/cut button and action
var tam_alive = document.getElementById('tam-event-keep-alive-video');
setInterval(function(){
  if (video.currentTime > 0) {
      tam_alive.click();
  } else {
      window.location.reload();
  };
}, 3000);
                            var tam_obj = $('#share-screen');
                            tam_obj.removeClass('tam-capturing');
                            tam_obj.addClass('tam-cut');
                            tam_obj.attr('onclick', 'window.location.reload()');
                        },
                        onerror: function() {
                            if (isChrome && location.protocol === 'http:') {
                                alert('Please test this WebRTC experiment on HTTPS.');
                            } else if(isChrome) {
                                alert('Screen capturing is either denied or not supported. Please install chrome extension for screen capturing or run chrome with command-line flag: --enable-usermedia-screen-capturing');
                            }
                            else if(!!navigator.mozGetUserMedia) {
                                alert(Firefox_Screen_Capturing_Warning);
                            }
                        }
                    });
                }

                /* on page load: get public rooms */
                var conferenceUI = conference(config);

                /* UI specific */
                var videosContainer = document.getElementById("videos-container") || document.body;
                var roomsList = document.getElementById('rooms-list');

                document.getElementById('share-screen').onclick = function() {
                    var roomName = document.getElementById('room-name') || { };
                    roomName.disabled = true;
                    captureUserMedia(function() {
                        conferenceUI.createRoom({
                            roomName: (roomName.value || 'Anonymous') + ' shared his screen with you'
                        });
                    });

                    //this.disabled = true;

                };
                // function rotateVideo(video) {
                //     video.style[navigator.mozGetUserMedia ? 'transform' : '-webkit-transform'] = 'rotate(0deg)';
                //     setTimeout(function() {
                //         video.style[navigator.mozGetUserMedia ? 'transform' : '-webkit-transform'] = 'rotate(360deg)';
                //     }, 1000);
                // }

                (function() {
                    var uniqueToken = document.getElementById('unique-token');
                    if (uniqueToken)
                        if (location.hash.length > 2) uniqueToken.parentNode.parentNode.parentNode.innerHTML = '<h2 style="text-align:center;"><a href="' + location.href + '" target="_blank">Share this link</a></h2>';
                        else uniqueToken.innerHTML = uniqueToken.parentNode.parentNode.href = '#' + (Math.random() * new Date().getTime()).toString(36).toUpperCase().replace( /\./g , '-');
                })();

                var Firefox_Screen_Capturing_Warning = 'Make sure that you are using Firefox Nightly and you enabled: media.getusermedia.screensharing.enabled flag from about:config page. You also need to add your domain in "media.getusermedia.screensharing.allowed_domains" flag.';

            </script>

            <script>
                var screenFrame, loadedScreenFrame;

                function loadScreenFrame(skip) {
                    if(loadedScreenFrame) return;
                    if(!skip) return loadScreenFrame(true);

                    loadedScreenFrame = true;

                    var iframe = document.createElement('iframe');
                    iframe.onload = function () {
                        iframe.isLoaded = true;
                        console.log('Screen Capturing frame is loaded.');

                        document.getElementById('share-screen').disabled = false;
                        // document.getElementById('room-name').disabled = false;
                    };
                    iframe.src = 'https://www.webrtc-experiment.com/getSourceId/';
                    iframe.style.display = 'none';
                    (document.body || document.documentElement).appendChild(iframe);

                    screenFrame = {
                        postMessage: function () {
                            if (!iframe.isLoaded) {
                                setTimeout(screenFrame.postMessage, 100);
                                return;
                            }
                            console.log('Asking iframe for sourceId.');
                            iframe.contentWindow.postMessage({
                                captureSourceId: true
                            }, '*');
                        }
                    };
                };

                if(!isWebRTCExperimentsDomain) {
                    loadScreenFrame();
                }
                else {
                    document.getElementById('share-screen').disabled = false;
                    // document.getElementById('room-name').disabled = false;
                }
            </script>

            <script>
                // todo: need to check exact chrome browser because opera also uses chromium framework
                var isChrome = !!navigator.webkitGetUserMedia;

                // DetectRTC.js - https://github.com/muaz-khan/WebRTC-Experiment/tree/master/DetectRTC
                // Below code is taken from RTCMultiConnection-v1.8.js (http://www.rtcmulticonnection.org/changes-log/#v1.8)
                var DetectRTC = {};

                (function () {

                    var screenCallback;

                    DetectRTC.screen = {
                        chromeMediaSource: 'screen',
                        getSourceId: function(callback) {
                            if(!callback) throw '"callback" parameter is mandatory.';
                            screenCallback = callback;
                            window.postMessage('get-sourceId', '*');
                        },
                        isChromeExtensionAvailable: function(callback) {
                            if(!callback) return;

                            if(DetectRTC.screen.chromeMediaSource == 'desktop') return callback(true);

                            // ask extension if it is available
                            window.postMessage('are-you-there', '*');

                            setTimeout(function() {
                                if(DetectRTC.screen.chromeMediaSource == 'screen') {
                                    callback(false);
                                }
                                else callback(true);
                            }, 2000);
                        },
                        onMessageCallback: function(data) {
                            if (!(typeof data == 'string' || !!data.sourceId)) return;

                            console.log('chrome message', data);

                            // "cancel" button is clicked
                            if(data == 'PermissionDeniedError') {
                                DetectRTC.screen.chromeMediaSource = 'PermissionDeniedError';
                                if(screenCallback) return screenCallback('PermissionDeniedError');
                                else throw new Error('PermissionDeniedError');
                            }

                            // extension notified his presence
                            if(data == 'rtcmulticonnection-extension-loaded') {
                                if(document.getElementById('install-button')) {
                                    // document.getElementById('install-button').parentNode.innerHTML = '<strong>Great!</strong> <a href="https://chrome.google.com/webstore/detail/screen-capturing/ajhifddimkapgcifgcodmmfdlknahffk" target="_blank">Google chrome extension</a> is installed.';
                                }
                                DetectRTC.screen.chromeMediaSource = 'desktop';
                            }

                            // extension shared temp sourceId
                            if(data.sourceId) {
                                DetectRTC.screen.sourceId = data.sourceId;
                                if(screenCallback) screenCallback( DetectRTC.screen.sourceId );
                            }
                        },
                        getChromeExtensionStatus: function (callback) {
                            if (!!navigator.mozGetUserMedia) return callback('not-chrome');

                            var extensionid = 'ajhifddimkapgcifgcodmmfdlknahffk';

                            var image = document.createElement('img');
                            image.src = 'chrome-extension://' + extensionid + '/icon.png';
                            image.onload = function () {
                                DetectRTC.screen.chromeMediaSource = 'screen';
                                window.postMessage('are-you-there', '*');
                                setTimeout(function () {
                                    if (!DetectRTC.screen.notInstalled) {
                                        callback('installed-enabled');
                                    }
                                }, 2000);
                            };
                            image.onerror = function () {
                                DetectRTC.screen.notInstalled = true;
                                callback('not-installed');
                            };
                        }
                    };

                    // check if desktop-capture extension installed.
                    if(window.postMessage && isChrome) {
                        DetectRTC.screen.isChromeExtensionAvailable();
                    }
                })();

                DetectRTC.screen.getChromeExtensionStatus(function(status) {
                    if(status == 'installed-enabled') {
                        if(document.getElementById('install-button')) {
                            document.getElementById('install-button').parentNode.innerHTML = '<strong>Great!</strong> <a href="https://chrome.google.com/webstore/detail/screen-capturing/ajhifddimkapgcifgcodmmfdlknahffk" target="_blank">Google chrome extension</a> is installed.';
                        }
                        DetectRTC.screen.chromeMediaSource = 'desktop';
                    }
                });

                window.addEventListener('message', function (event) {
                    if (event.origin != window.location.origin) {
                        return;
                    }

                    DetectRTC.screen.onMessageCallback(event.data);
                });

                console.log('current chromeMediaSource', DetectRTC.screen.chromeMediaSource);
            </script>
